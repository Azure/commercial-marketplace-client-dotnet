// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Marketplace.Metering.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class UsageEventConflictResponseAdditionalInfo
    {
        /// <summary>
        /// Initializes a new instance of the
        /// UsageEventConflictResponseAdditionalInfo class.
        /// </summary>
        public UsageEventConflictResponseAdditionalInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// UsageEventConflictResponseAdditionalInfo class.
        /// </summary>
        /// <param name="usageEventId">Unique identifier associated with the
        /// usage event</param>
        /// <param name="status">Accepted|NotProcessed|Expired. Possible values
        /// include: 'Accepted', 'NotProcessed', 'Expired'</param>
        /// <param name="messageTime">Time this message was created in
        /// UTC</param>
        /// <param name="resourceId">Identifier of the resource against which
        /// usage is emitted</param>
        /// <param name="dimension">Dimension identifier</param>
        /// <param name="effectiveStartTime">Time in UTC when the usage event
        /// occurred</param>
        /// <param name="planId">Plan associated with the purchased
        /// offer</param>
        public UsageEventConflictResponseAdditionalInfo(System.Guid? usageEventId = default(System.Guid?), string status = default(string), System.DateTime? messageTime = default(System.DateTime?), System.Guid? resourceId = default(System.Guid?), long? quantity = default(long?), string dimension = default(string), System.DateTime? effectiveStartTime = default(System.DateTime?), System.Guid? planId = default(System.Guid?))
        {
            UsageEventId = usageEventId;
            Status = status;
            MessageTime = messageTime;
            ResourceId = resourceId;
            Quantity = quantity;
            Dimension = dimension;
            EffectiveStartTime = effectiveStartTime;
            PlanId = planId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identifier associated with the usage event
        /// </summary>
        [JsonProperty(PropertyName = "usageEventId")]
        public System.Guid? UsageEventId { get; set; }

        /// <summary>
        /// Gets or sets accepted|NotProcessed|Expired. Possible values
        /// include: 'Accepted', 'NotProcessed', 'Expired'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets time this message was created in UTC
        /// </summary>
        [JsonProperty(PropertyName = "messageTime")]
        public System.DateTime? MessageTime { get; set; }

        /// <summary>
        /// Gets or sets identifier of the resource against which usage is
        /// emitted
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public System.Guid? ResourceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public long? Quantity { get; set; }

        /// <summary>
        /// Gets or sets dimension identifier
        /// </summary>
        [JsonProperty(PropertyName = "dimension")]
        public string Dimension { get; set; }

        /// <summary>
        /// Gets or sets time in UTC when the usage event occurred
        /// </summary>
        [JsonProperty(PropertyName = "effectiveStartTime")]
        public System.DateTime? EffectiveStartTime { get; set; }

        /// <summary>
        /// Gets or sets plan associated with the purchased offer
        /// </summary>
        [JsonProperty(PropertyName = "planId")]
        public System.Guid? PlanId { get; set; }

    }
}
