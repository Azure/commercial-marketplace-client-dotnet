// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Marketplace
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SubscriptionOperations.
    /// </summary>
    public static partial class SubscriptionOperationsExtensions
    {
            /// <summary>
            /// List outstanding operations
            /// </summary>
            /// <remarks>
            /// Lists the outstanding operations for the current publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static OperationList ListOperations(this ISubscriptionOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.ListOperationsAsync(subscriptionId, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List outstanding operations
            /// </summary>
            /// <remarks>
            /// Lists the outstanding operations for the current publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationList> ListOperationsAsync(this ISubscriptionOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOperationsWithHttpMessagesAsync(subscriptionId, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get operation status
            /// </summary>
            /// <remarks>
            /// Enables the publisher to track the status of the specified triggered async
            /// operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static Operation GetOperationStatus(this ISubscriptionOperations operations, System.Guid subscriptionId, System.Guid operationId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.GetOperationStatusAsync(subscriptionId, operationId, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get operation status
            /// </summary>
            /// <remarks>
            /// Enables the publisher to track the status of the specified triggered async
            /// operation (such as Subscribe, Unsubscribe, ChangePlan, or ChangeQuantity).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> GetOperationStatusAsync(this ISubscriptionOperations operations, System.Guid subscriptionId, System.Guid operationId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusWithHttpMessagesAsync(subscriptionId, operationId, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the status of an operation
            /// </summary>
            /// <remarks>
            /// Update the status of an operation to indicate success or failure with the
            /// provided values.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Success', 'Failure'
            /// </param>
            public static void UpdateOperationStatus(this ISubscriptionOperations operations, System.Guid subscriptionId, System.Guid operationId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), string planId = default(string), long? quantity = default(long?), UpdateOperationStatusEnum? status = default(UpdateOperationStatusEnum?))
            {
                operations.UpdateOperationStatusAsync(subscriptionId, operationId, requestId, correlationId, planId, quantity, status).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the status of an operation
            /// </summary>
            /// <remarks>
            /// Update the status of an operation to indicate success or failure with the
            /// provided values.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Success', 'Failure'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateOperationStatusAsync(this ISubscriptionOperations operations, System.Guid subscriptionId, System.Guid operationId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), string planId = default(string), long? quantity = default(long?), UpdateOperationStatusEnum? status = default(UpdateOperationStatusEnum?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateOperationStatusWithHttpMessagesAsync(subscriptionId, operationId, requestId, correlationId, planId, quantity, status, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
