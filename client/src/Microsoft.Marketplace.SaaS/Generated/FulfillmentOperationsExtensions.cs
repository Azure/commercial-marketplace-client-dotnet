// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Marketplace.SaaS
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FulfillmentOperations.
    /// </summary>
    public static partial class FulfillmentOperationsExtensions
    {
            /// <summary>
            /// Resolve a subscription
            /// </summary>
            /// <remarks>
            /// The resolve endpoint enables the publisher to resolve a marketplace token
            /// to a persistent resource ID. The resource ID is the unique identifier for a
            /// SaaS subscription. When a user is redirected to a partner's website, the
            /// URL contains a token in the query parameters. The partner is expected to
            /// use this token and make a request to resolve it. The response contains the
            /// unique SaaS subscription ID, name, offer ID, and plan for the resource.
            /// This token is valid for one hour only.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsMarketplaceToken'>
            /// The token query parameter in the URL when the user is redirected to the
            /// SaaS partner's website from Azure (for example,
            /// https://contoso.com/signup?token=..). Note, The URL decodes the token value
            /// from the browser before using it.
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static ResolvedSubscription Resolve(this IFulfillmentOperations operations, string xMsMarketplaceToken, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.ResolveAsync(xMsMarketplaceToken, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resolve a subscription
            /// </summary>
            /// <remarks>
            /// The resolve endpoint enables the publisher to resolve a marketplace token
            /// to a persistent resource ID. The resource ID is the unique identifier for a
            /// SaaS subscription. When a user is redirected to a partner's website, the
            /// URL contains a token in the query parameters. The partner is expected to
            /// use this token and make a request to resolve it. The response contains the
            /// unique SaaS subscription ID, name, offer ID, and plan for the resource.
            /// This token is valid for one hour only.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xMsMarketplaceToken'>
            /// The token query parameter in the URL when the user is redirected to the
            /// SaaS partner's website from Azure (for example,
            /// https://contoso.com/signup?token=..). Note, The URL decodes the token value
            /// from the browser before using it.
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResolvedSubscription> ResolveAsync(this IFulfillmentOperations operations, string xMsMarketplaceToken, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResolveWithHttpMessagesAsync(xMsMarketplaceToken, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List subscriptions
            /// </summary>
            /// <remarks>
            /// Lists all the SaaS subscriptions for a publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional value, only used for ListSubscriptions.
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static IPage<Subscription> ListSubscriptions(this IFulfillmentOperations operations, string continuationToken = default(string), System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.ListSubscriptionsAsync(continuationToken, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List subscriptions
            /// </summary>
            /// <remarks>
            /// Lists all the SaaS subscriptions for a publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional value, only used for ListSubscriptions.
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Subscription>> ListSubscriptionsAsync(this IFulfillmentOperations operations, string continuationToken = default(string), System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSubscriptionsWithHttpMessagesAsync(continuationToken, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get subscription
            /// </summary>
            /// <remarks>
            /// Gets the specified SaaS subscription. Use this call to get license
            /// information and plan information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static Subscription GetSubscription(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.GetSubscriptionAsync(subscriptionId, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get subscription
            /// </summary>
            /// <remarks>
            /// Gets the specified SaaS subscription. Use this call to get license
            /// information and plan information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscription> GetSubscriptionAsync(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionWithHttpMessagesAsync(subscriptionId, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a subscription
            /// </summary>
            /// <remarks>
            /// Use this call to update the plan, the user count (quantity), or both.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            public static FulfillmentOperationsUpdateSubscriptionHeaders UpdateSubscription(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), string planId = default(string), long? quantity = default(long?))
            {
                return operations.UpdateSubscriptionAsync(subscriptionId, requestId, correlationId, planId, quantity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a subscription
            /// </summary>
            /// <remarks>
            /// Use this call to update the plan, the user count (quantity), or both.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FulfillmentOperationsUpdateSubscriptionHeaders> UpdateSubscriptionAsync(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), string planId = default(string), long? quantity = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSubscriptionWithHttpMessagesAsync(subscriptionId, requestId, correlationId, planId, quantity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Delete a subscription
            /// </summary>
            /// <remarks>
            /// Unsubscribe and delete the specified subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static FulfillmentOperationsDeleteSubscriptionHeaders DeleteSubscription(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.DeleteSubscriptionAsync(subscriptionId, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a subscription
            /// </summary>
            /// <remarks>
            /// Unsubscribe and delete the specified subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FulfillmentOperationsDeleteSubscriptionHeaders> DeleteSubscriptionAsync(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubscriptionWithHttpMessagesAsync(subscriptionId, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// List available plans
            /// </summary>
            /// <remarks>
            /// Use this call to find out if there are any private or public offers for the
            /// current publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static SubscriptionPlans ListAvailablePlans(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.ListAvailablePlansAsync(subscriptionId, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List available plans
            /// </summary>
            /// <remarks>
            /// Use this call to find out if there are any private or public offers for the
            /// current publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionPlans> ListAvailablePlansAsync(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAvailablePlansWithHttpMessagesAsync(subscriptionId, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activate a subscription
            /// </summary>
            /// <remarks>
            /// Use this call to activate a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            public static void ActivateSubscription(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), string planId = default(string), long? quantity = default(long?))
            {
                operations.ActivateSubscriptionAsync(subscriptionId, requestId, correlationId, planId, quantity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate a subscription
            /// </summary>
            /// <remarks>
            /// Use this call to activate a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='planId'>
            /// </param>
            /// <param name='quantity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateSubscriptionAsync(this IFulfillmentOperations operations, System.Guid subscriptionId, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), string planId = default(string), long? quantity = default(long?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateSubscriptionWithHttpMessagesAsync(subscriptionId, requestId, correlationId, planId, quantity, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List subscriptions
            /// </summary>
            /// <remarks>
            /// Lists all the SaaS subscriptions for a publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            public static IPage<Subscription> ListSubscriptionsNext(this IFulfillmentOperations operations, string nextPageLink, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?))
            {
                return operations.ListSubscriptionsNextAsync(nextPageLink, requestId, correlationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List subscriptions
            /// </summary>
            /// <remarks>
            /// Lists all the SaaS subscriptions for a publisher.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='requestId'>
            /// A unique string value for tracking the request from the client, preferably
            /// a GUID. If this value isn't provided, one will be generated and provided in
            /// the response headers.
            /// </param>
            /// <param name='correlationId'>
            /// A unique string value for operation on the client. This parameter
            /// correlates all events from client operation with events on the server side.
            /// If this value isn't provided, one will be generated and provided in the
            /// response headers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Subscription>> ListSubscriptionsNextAsync(this IFulfillmentOperations operations, string nextPageLink, System.Guid? requestId = default(System.Guid?), System.Guid? correlationId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSubscriptionsNextWithHttpMessagesAsync(nextPageLink, requestId, correlationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
